generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/flood_warning_app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String    @unique
    password        String?
    emailVerified   DateTime?
    image           String?
    role            UserRole  @default(PUBLIC)
    organization    String?
    phoneNumber     String?
    preferences     Json?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    accounts        Account[]
    sessions        Session[]
    alerts          Alert[]
    savedLocations  SavedLocation[]
    notifications   Notification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model FloodZone {
    id          String   @id @default(cuid())
    name        String
    description String?
    state       String
    county      String?
    city        String?
    latitude    Float
    longitude   Float
    population  Int?
    riskLevel   RiskLevel @default(LOW)
    bounds      Json?     // GeoJSON polygon for zone boundaries
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    gaugeStations GaugeStation[]
    alerts        Alert[]
    predictions   FloodPrediction[]
    savedBy       SavedLocation[]
}

model GaugeStation {
    id            String      @id @default(cuid())
    usgsId        String      @unique
    name          String
    description   String?
    latitude      Float
    longitude     Float
    stationType   StationType
    floodZoneId   String
    elevation     Float?
    drainageArea  Float?
    isActive      Boolean     @default(true)
    lastUpdated   DateTime?
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    floodZone     FloodZone @relation(fields: [floodZoneId], references: [id])
    readings      GaugeReading[]
    floodStages   FloodStage[]
}

model GaugeReading {
    id            String   @id @default(cuid())
    stationId     String
    timestamp     DateTime
    waterLevel    Float    // in feet
    discharge     Float?   // in cubic feet per second
    temperature   Float?   // in Celsius
    ph            Float?
    dissolvedO2   Float?
    turbidity     Float?
    velocity      Float?   // in feet per second
    gageHeight    Float?   // in feet
    createdAt     DateTime @default(now())

    station       GaugeStation @relation(fields: [stationId], references: [id])

    @@unique([stationId, timestamp])
    @@index([timestamp])
}

model FloodStage {
    id          String     @id @default(cuid())
    stationId   String
    stageType   StageType
    level       Float      // water level in feet
    description String?
    isActive    Boolean    @default(true)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    station     GaugeStation @relation(fields: [stationId], references: [id])

    @@unique([stationId, stageType])
}

model FloodPrediction {
    id            String      @id @default(cuid())
    floodZoneId   String
    timeHorizon   Int         // hours: 1, 3, 6, 12, 24
    predictedAt   DateTime
    validFor      DateTime    // when this prediction is for
    floodRisk     Float       // 0-1 probability
    severity      SeverityLevel
    confidence    Float       // 0-1 confidence level
    affectedArea  Json?       // GeoJSON of predicted affected area
    waterLevel    Float?      // predicted peak water level
    modelVersion  String      @default("v1.0")
    metadata      Json?       // additional model output data
    createdAt     DateTime    @default(now())

    floodZone     FloodZone @relation(fields: [floodZoneId], references: [id])

    @@index([floodZoneId, timeHorizon, validFor])
}

model Alert {
    id              String      @id @default(cuid())
    userId          String
    floodZoneId     String
    alertType       AlertType
    severity        SeverityLevel
    threshold       Float       // trigger threshold
    isActive        Boolean     @default(true)
    emailEnabled    Boolean     @default(true)
    smsEnabled      Boolean     @default(false)
    lastTriggered   DateTime?
    triggerCount    Int         @default(0)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    user            User        @relation(fields: [userId], references: [id])
    floodZone       FloodZone   @relation(fields: [floodZoneId], references: [id])
    notifications   Notification[]

    @@unique([userId, floodZoneId, alertType])
}

model Notification {
    id          String         @id @default(cuid())
    userId      String
    alertId     String?
    title       String
    message     String
    type        NotificationType
    priority    PriorityLevel
    isRead      Boolean        @default(false)
    emailSent   Boolean        @default(false)
    smsSent     Boolean        @default(false)
    metadata    Json?
    createdAt   DateTime       @default(now())

    user        User           @relation(fields: [userId], references: [id])
    alert       Alert?         @relation(fields: [alertId], references: [id])

    @@index([userId, createdAt])
}

model SavedLocation {
    id          String    @id @default(cuid())
    userId      String
    floodZoneId String
    nickname    String?
    isDefault   Boolean   @default(false)
    createdAt   DateTime  @default(now())

    user        User      @relation(fields: [userId], references: [id])
    floodZone   FloodZone @relation(fields: [floodZoneId], references: [id])

    @@unique([userId, floodZoneId])
}

model SystemStatus {
    id              String   @id @default(cuid())
    service         String   @unique
    status          String   // operational, degraded, down
    lastChecked     DateTime
    responseTime    Int?     // in milliseconds
    errorMessage    String?
    metadata        Json?
    updatedAt       DateTime @updatedAt
}

// Enums
enum UserRole {
    PUBLIC
    EMERGENCY_RESPONDER
    GOVERNMENT_AGENCY
    RESEARCHER
    ADMIN
}

enum RiskLevel {
    LOW
    MODERATE
    HIGH
    EXTREME
}

enum StationType {
    RIVER
    STREAM
    TIDAL
    COASTAL
    RESERVOIR
}

enum StageType {
    ACTION
    MINOR
    MODERATE
    MAJOR
    RECORD
}

enum SeverityLevel {
    LOW
    MODERATE
    HIGH
    SEVERE
    EXTREME
}

enum AlertType {
    WATER_LEVEL
    FLOOD_PREDICTION
    WEATHER_WARNING
    SYSTEM_STATUS
}

enum NotificationType {
    FLOOD_WARNING
    ALERT_TRIGGERED
    SYSTEM_UPDATE
    WEATHER_UPDATE
}

enum PriorityLevel {
    LOW
    NORMAL
    HIGH
    URGENT
    CRITICAL
}
